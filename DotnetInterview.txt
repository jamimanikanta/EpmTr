Links:
https://www.c-sharpcorner.com/blogs/introduction-to-clr-in-net-framework1
https://www.codeproject.com/Articles/988257/Dependency-Injection-using-Unity-container
https://www.mssqltips.com/sqlservertip/2977/demonstrations-of-transaction-isolation-levels-in-sql-server/
https://www.codeproject.com/Articles/535635/Async-Await-and-the-Generated-StateMachine
https://www.c-sharpcorner.com/blogs/understanding-mvc-request-life-cycle-part-2

.net questions:
 - orm
 - unit tests
 - performance analysis
 - val vs ref types
 - abstract vs virtual
 - mvc pattern
 - asp.net mvc action filter
 - asp.net mvc model binder
 - transaction isolation
 - DI container 

1.	Generic Queue Implementation
2.	LINQ Expression Implementation
3.	Merge Trees Program
4.	Asked to refactor and identify the error in code which is in the bottom of the Ram’s first email


1.	Async Await details along with State Machine 
2.	Http Methods
3.	What is MSMQ Topic ?


1.	Generic List (refer attached CodeTest1 file).
2.	Tree Merge (refer attached CodeTest2 file).
3.	On Async and Await (refer attached CodeTest3 file).
4.	LinQ IEnumerable query and IQueryable expression (refer attached CodeTest4 file).

1.	How Async and Await works – It was about StateMachine.
2.	Principles of REST and about HTTP Methods
3.	I have an operation which returns a value but also does some update in backend, which method do you use?
4.	What is OPTIONS HTTP Method?

          Generic Queue Implementation
           Merge Two Sorted Arrays
          Complete the Program Execution using Async and Await.



1.	Generic List Implementation
2.	Merge Two Sorted Arrays
3.	Complete the Program Execution using Async and Await 


4.	What is StateMachine in Async Await ?
5.	Principles of REST
6.	Difference between POST and PUT 




In continuation to the discussion we had yesterday , I am sending the links and content to get prepared for client interview.
Feel free to block 1or 2 hours on calendar for this whole week to discuss about these topics.
 
 
Links for Candidates
 
async/await
https://blog.stephencleary.com/2012/02/async-and-await.html
https://www.infoworld.com/article/3152735/application-development/my-two-cents-on-the-task-waitall-and-task-whenall-methods.html
https://www.codeproject.com/Articles/535635/Async-Await-and-the-Generated-StateMachine
 
 
Expression
https://stackoverflow.com/questions/793571/why-would-you-use-expressionfunct-rather-than-funct
 
IEnumerable vs IQueryable
https://filteredcode.wordpress.com/2016/04/28/ienumerable-vs-iqueryable/
 
asymptotic algorithm complexity. Theoretical base:
https://www.geeksforgeeks.org/analysis-of-algorithms-set-1-asymptotic-analysis/
 
Materials related to REST:
https://www.codeproject.com/Articles/283550/Implementing-important-principles-of-REST-using
HTTP:
read PUT and OPTIONS: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
https://exceptionnotfound.net/using-http-methods-correctly-in-asp-net-web-api/
 
mindset check:
https://www.geeksforgeeks.org/searching-algorithms/
https://www.geeksforgeeks.org/sorting-algorithms/
https://www.geeksforgeeks.org/string-data-structure/
and solve tasks from
https://www.hackerrank.com/domains/algorithms
 
message queue: this one of implementations. good example to get start - https://www.rabbitmq.com/getstarted.html
please read also about service bus.
 
https://softwaremill.com/using-kafka-as-a-message-queue/
 
Practical Tasks for Candidates
 
1.	Code review, refactoring, clean code:
namespace SomeProgram{
class SomeClass{
  public string externalServiceUrl = "";
  
  public UserProfile Get_UserProfile(object userName){
   var provider = new HttpProvider(externalServiceUrl);
   
            var response = await provider.GetAsync<User>(userName);
   var favorites = await provider.GetFavoritesAsync().ToList().Where(x => x.UserId == response.UserId);
   var result = Map_Response_Which_Was_Retrived_From_User__Store_To_User_Profile(response)   ;
   
   
   //Thread.Sleep(1000);
   provider.Dispose();   
   
   foreach(var item in favorites){
   var F = new FavoriteItem();
  F.Title = item.ProductName;
   F.Id = item.Id;
   
    result.Favorites.Add(F);
   }
            return result;
  }
  
  private static UserProfile Map_Response_Which_Was_Retrived_From_User__Store_To_User_Profile(dynamic userInfo){
   UserProfile R = new UserProfile();
   
   R.UserName = userInfo.Name;
      
   return R;
  }
}
}
 
2. 
class User {
string Name;
string Surname;
int Age;
}
interface IDbContext {
IQueryable<User> GetUsers(Expression<Func<User, bool>> filter);
}
Could you please implement simple method that can get users older than 30 years that has their surnames started with “V” letter using this interface.
 
3. Merge two sorted arrays in O(n).
4. Implement HashMap/Dictionary based on Array
5. You have number (e.g. 10341) write code that will translate it to string (e.g. Ten thousands three hundreds forty one).
6. Complete the function firstRepeatedWord to find first repeated word in a sentence. A sentence is minimally defined as a word or group of words. 
Treat the words as case-sensitive, so, for example, 'had' and 'Had' are different words, so having both does not constitute a repetition. A sub-string of a word that is not delimited by acceptable  to be repeated, e.g. "Had Haddock had a fit?" has no legitimate repeated words.
7. Implement generic stack based on array
8. Implement generic queue based on array
9. Implement generic List based on array.
10. Implementation of algorithm for searching the number of possible palindromes by given input string.                         




1) Why you want to go for assessment.
2) Long term plan for the future
3) Performance issues in the current project
4) How do you involve in code reviews.
5) Software Quality attributes
6) Sonar Cube in your project
7) Prefer executable specification vs Static document.
8) What are different kinds of documents present in your project?
9) UML diagrams and its basics and purpose
10) Difference between software architecture and software design
11) Performances fixes will comes under architectural or design changes
12) Why do we need design patterns?
13) How to improve maintainability using design patterning name some of the DP you used
14) Anti patterns and how to avoid them
15) Estimation technique. Which one you used what other techniques you know
16) Why Fibonacci series why can't other techniques
17) What is Technical debt? How do you remove it?
18) Customer insist to decrease the technical debt. How can you manage?
19) How do you introduce a junior to the project? If a new comer comes to the project how you knowledge transfer to that guy. What kind of tasks you will assign to the person.
Small features or bug fixes or all over the project you assign the tasks. 
20) How can you guarantee the code quality in you project
21) All team members will participate in the reviews. Whom you send your code to review.
22) Difference b/w continuous integrations vs continuous delivery
23) Difference b/w continuous delivery vs continuous deployment
24) What are the bad unit tests can you tell some points
25) Diff b/w Integration test and unit test
26) Diff b/w Mock and stub
27) Diff b/w scrum and Kanban
28) Scrum master roles and responsibilities
29) Scrum ceremonies
30) Waterfall process where it is applicable.
31) Nonfunctional requirements
32) How do you participate in communication with customer?
33) You got a direct call from the customer to change some requirements how do you deal in that situation
34) A task is assigned to you are not expert in that technology how do you overcome this situation
35) You gave a comments to your college but he is not agree on those comments what you do.
36) How do you get the information about new trends in the market?
37) New technologies to learn how much time you spend
38) Proud about your project
39) Do you learn any new language or technology which is not related to your project in recent days?
40) How do you do refactoring the code where do you start. How you improve the design of existing code
41) What is clean code?
42) Art of unit testing
43) Design patterns elements of reusable object oriented software
44) Pros and cons of a stored procedure
45) Synchronization primitives
46) .Net collections
47) JS function invocation.
48) Objects to store data in C#
49) DB performance optimization and indexes
50) Aspect oriented programming
51) Clean code and code smells
52) ASP.NET MVC pipeline
53) Dependency injection vs service locator
54) What is a good unit and integration tests means


